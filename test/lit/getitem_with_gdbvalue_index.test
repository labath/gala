; Check that __getitem__ works correctly with different index types.

; RUN: %clangxx -g -o %t getitem_with_gdbvalue_index/getitem_with_gdbvalue_index.cc
; RUN: %lldb -b -o 'b main' -o 'r' -o 'script import getitem_with_gdbvalue_index' %t | FileCheck %s --check-prefixes=PROCESS,BOTH

; Check that it also works without a live process.
; RUN: %lldb -b -o 'script import getitem_with_gdbvalue_index' %t | FileCheck %s --check-prefixes=BOTH

; BOTH: array[int] -> 11
; BOTH: array[Value(int)] -> 22
; BOTH: array[Value(char)] -> 33
; BOTH: array[Value(float)] -> 44
; BOTH: array[Value(string)] -> gdb.error
; BOTH: array[Value(enum)] -> 66

; PROCESS: struct hack: elements[1] -> 0
; Skipped without a process

; BOTH: struct[str] -> 99
; BOTH: struct[gdb.Field] -> 99
; BOTH: struct[str/invalid] -> gdb.error
; BOTH: struct[int] -> gdb.error


; BOTH: typedefed_struct[str] -> 777

; BOTH: struct[anonymous union member].base_member -> 12
; BOTH: struct[anonymous union member].struct_member -> 78
; BOTH: struct[anonymous union member].union_member -> 90

; PROCESS: ptr_to_array[Value(int)] -> 22
; PROCESS: Checking if out of bounds access raises an exception
; PROCESS: Value was created
; PROCESS: ptr_to_array[out of bounds] -> gdb.error
; PROCESS: ptr_to_struct[str] -> 99
; PROCESS: typedefed_ptr_to_struct[str] -> 42

; Skip the pointer-to-array and pointer-to-struct cases without a process for
; now. When we get a pointer SBValue from SBTarget.EvaluateExpression and there
; is no active process, lldb can't dereference it because the SBValue contains
; a file address.

; BOTH: struct_array[str] -> 1234
; BOTH: typedefed_struct_array[str] -> 1234

; BOTH: value(int)[int] -> gdb.error
; BOTH: value(int)[value(int)] -> gdb.error
; BOTH: value(int)[str] -> gdb.error
; PROCESS: value(int)[value(str)] -> gdb.error
